install.packages("DiagrammeR")
install.packages("DiagrammeRsvg")
install.packages("DiagrammeRsvg")
library(DiagrammeR)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
?node_aes
colors()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
render_graph(c_graph)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
render_graph(gph1)
source('~/.active-rstudio-document')
render_graph(gph1)
export_graph(gph1, graph.svg)
export_graph(gph1, "graph.svg")
install.packages("DiagrammeRsvg")
install.packages("V8")
install.packages("DiagrammeRsvg")
library(DiagrammeRsvg)
export_graph(gph1, "graph.svg")
install.packages("rsvg")
install.packages("rsvg")
export_graph(gph1, "graph.svg")
source('~/.active-rstudio-document')
render_graph(gph1)
?add_nodes_from_df_cols
121*1.2+20
install.packages("RobinHood")
library(RobinHood)
RH = RobinHood(username = "jonathan.todd.oxborrow@gmail.com", password = "80SoapFilled")
x <- 5
x
Sys.which("git")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
paste0(c("d", "e"), collapse=" ")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
data(iris)
library(dplyr)
glimpse(iris)
library(missForest)
iris.mis <- prodNA(iris, noNA = .1)
summary(iris.mis)
iris.imp <- missForest(iris.mis)
iris.imp$ximp
iris.imp$OOBerror
glimpse(iris)
iris$Species <- as.character(iris$Species)
glimpse(iris)
iris.mis <- prodNA(iris, noNA = .1)
glimpse(iris.mis)
summary(iris.mis)
NA %in% iris.mis$Species
iris.imp <- missForest(iris.mis)
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
chart_link
install.packages("plotly")
source('~/test.R')
p
source('~/test.R')
p
source('~/test.R')
p
source('~/test.R')
p
View(volcano)
class(volcano)
v1 <- volcano
rownames(v1) <- paste0("H", rowname(v1))
rownames(v1) <- paste0("H", rownames(v1))
rownames(v1)
dim(volcano)
rownames(v1) <- paste0("H", 1:87)
View(v1)
p <- plot_ly(z = volcano, type = "heatmap")
p <- plot_ly(z = v1, type = "heatmap")
p
source('~/test.R')
p
p <- plot_ly(
x = letters[1:15], y = LETTERS[1:15],
z = m, type = "heatmap"
)
p
m <- matrix(rnorm(15*15), nrow = 3, ncol = 3)
p <- plot_ly(
x = letters[1:15], y = LETTERS[1:15],
z = m, type = "heatmap"
)
p
View(m)
m <- matrix(rnorm(15*15), nrow = 15, ncol = 15)
p <- plot_ly(
x = letters[1:15], y = LETTERS[1:15],
z = m, type = "heatmap"
)
p
size <- 15
source('~/test.R')
source('~/test.R')
p
source('~/test.R')
p
source('~/test.R')
p
source('~/test.R')
source('~/test.R')
p
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=c(0.3, 0.6, 0.8, 0.95, 0.40, 0.20))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
install.packages("basictabler")
install.packages("pivottabler")
library(pivotabler)
library(pivottabler)
vignette(package = "pivottabler")
vignette(package = "pivottabler", "v01-introduction")
pt <- PivotTable$new()
pt$addData(bhmtrains)
pt$addColumnDataGroups("TrainCategory")
pt$addRowDataGroups("TOC")
pt$defineCalculation(calculationName = "TotalTrains", summariseExpression = "n()")
pt$renderPivot()
glimpse(bhmtrains)
library(dplyr)
glimpse(bhmtrains)
pt$evaluatePivot()
pt
pt$asTidyDataFrame()
print(pt$asTidyDataFrame())
glimpse(pt$asTidyDataFrame())
glimpse(pt$asDataFrame())
View(pt$asDataFrame())
pt$addColumnDataGroups("PowerType")
pt$renderPivot()
pt$defineCalculation(calculationName = "sumTrains", summariseExpression = "n()")
vignette("v09-irregularlayout")
vignette(package="basictable")
vignette(package="basictabler")
vignette("v01-introduction")
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 2), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 0), b=c(20, 30)))
r2d3::r2d3("testjs.js", data=data.frame(a=c(1, 0), b=c(20, 30)))
library(httr)
oauth_endpoints()
oauth_endpoints("azure")
install.packages("plotly")
library(plotly)
plot_ly(volcano, type = "heatmap")
data("volcano")
plot_ly(volcano, type = "heatmap")
volcano
plot_ly(datasets::volcano, type = "heatmap")
plot_ly(as.data.frame(volcano), type = "heatmap")
vignette(package = "plotly")
demo()
demo("sf-geo")
install.packages("sf")
demo("sf-geo")
library(MicrosoftR)
library("sf")
library(plotly)
example("plot_ly")
plot_ly(economics, x = ~pop)
plot_ly(economics, x = ~date, y=~pop)
library(plotly)
plot_ly(economics, ~date, ~pop)
plot_ly(economics, x=~date, y=~pop)
r2d3::r2d3("bullets.js", data = jsonlite::read_json("bullets.json"), d3_version = 3, container = "div", dependencies = c("d3_bullet.js"))
install.packages("RobinHood")
install.packages(c("DiagrammeR", "DiagrammeRsvg"))
?igraph
demo(igraph::crashR)
demo("igraph::crashR")
demo()
demo(crashR)
library(igraph)
demo(crashR)
demo(community)
demo(hrg)
install.packages("bookdown")
cd /bin
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
getwd()
setwd("~/Projects/joxborrow.github.io")
blogdown:::serve_site()
library(bookdown)
getwd()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
getwd()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("rocker")
serve_site()
library(blogdown)
serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
DiagrammeR::grViz("sample.dot")
knitr::opts_chunk$set(echo = TRUE)
DiagrammeR::grViz("sample.dot")
knitr::opts_chunk$set(echo = TRUE)
DiagrammeR::grViz("sample.dot")
knitr::opts_chunk$set(echo = TRUE)
DiagrammeR::grViz("sample.dot")
library(igraph)
g <- graph.formula(1-2, 1-3, 1-4, 1-5, 5-6, 3-7)
print(g)
plot(g)
V(g)$color[1] <- "red"
plot(g)
V(g)$color <- "lightblue"
plot(g)
g <- g %>% set_vertex_attr("color", index = 1, "red")
plot(g)
get.shortest.paths(g, 6, 1)
get.shortest.paths(g, 6, 1)$vpath
get.shortest.paths(g, 6, 1)[[1]]
get.shortest.paths(g, 6, 1)[[1]][[1]]
View(get.shortest.paths(g, 6, 1))
get.shortest.paths(g, 6, 1)[["vpath"]][[1]]
get.shortest.paths(g, 6, 1)[["vpath"]][[1]][["6"]]
igraph::is.simple(g)
library(rpart)
?pred.rpart
?predict
?predict.rpart
z.auto <- rpart(Mileage ~ Weight, car.test.frame)
View(car.test.frame)
predict(z.auto)
pred <- predict(z.auto)
dim(pred)
class(pred)
length(pred)
dim(car.test.frame)
rel.pred <- predict(rpart(Reliability ~ Price + Country + HP))
rel.pred <- predict(rpart(Reliability ~ Price + Country + HP, car.test.frame))
View(rel.pred)
mdl <- rpart(Reliablity ~ Price + Country + HP, car.test.frame)
mdl <- rpart(Reliability ~ Price + Country + HP, car.test.frame)
mdl
?rpart
plot(mdl)
library(rpart.plot)
install.packages("rpart.plot")
install.packages("rpart.plot")
blogdown::serve_site()
library(blogdown)
serve_site()
serve_site()
serve_site()
library(shiny)
x <- reactiveVal(10)
observe({message("x is ", x())})
x
x(5)
x(10)
x <- reactiveVal(10)
observe({message("x is ", x())})
x(5)
observe({print("x is ", x())})
x(5)
x(5)
source('~/.active-rstudio-document')
x(10)
library(blogdown)
serve_site()
serve_site()
library(blogdown)
library(blogdown)
build_site()
blogdown::serve_site()
stop_server()
remotes::install_github('rstudio/blogdown')
detach("package:blogdown", unload = TRUE)
remove.packages("blogdown", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("blogdown")
library(assertr)
install.packages("assertr")
library(assertr)
library(blogdown)
serve_site()
blogdown::build_site()
libray(blogdown)
library(blogdown)
install.packages("blogdown")
blogdown::serve_site()
blogdown::serve_site()
getwd()
blogdown::serve_site()
?serve_site
blogdown::serve_site(.)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
install_hugo()
blogdown::install_hugo()
blogdown::build_site()
library(blogdown)
serve_site()
blogdown::new_site()
